** Stata code
** Liebensteiner, M. & Kimani, A. (2025) "From Gas to Coal: Environmental and Health Impacts of Europe's Energy Crisis"
** Software package: Stata 16.1


** ANALYSIS
clear
estimates clear
// change directory to where the dataset is stored
cd "G:\.shortcut-targets-by-id\1CF1NeSl2jlOzAgSnLr8nfeqyYky2Noa1\Mario and Alex paper\Submissions"
use Dataset_LiebensteinerKimani.dta

replace gen_gas = gen_gas + gen_coalderivedgas
drop gen_coalderivedgas

gen year = year(date)
gen month = month(date)
gen dow = dow(date)


** Efficiency factors:
gen rho_gas = .
gen rho_hardcoal = .
gen rho_lignite = .

replace rho_gas = 0.551 if country == "Czechia" & year == 2015
replace rho_gas = 0.551 if country == "Czechia" & year == 2016
replace rho_gas = 0.551 if country == "Czechia" & year == 2017
replace rho_gas = 0.551 if country == "Czechia" & year == 2018
replace rho_gas = 0.551 if country == "Czechia" & year == 2019
replace rho_gas = 0.551 if country == "Czechia" & year == 2020
replace rho_gas = 0.551 if country == "Czechia" & year == 2021
replace rho_gas = 0.551 if country == "Czechia" & year == 2022
replace rho_gas = 0.551 if country == "Czechia" & year == 2023
replace rho_gas = 0.551 if country == "Czechia" & year == 2024

replace rho_gas = 0.503 if country == "Germany" & year == 2015
replace rho_gas = 0.511 if country == "Germany" & year == 2016
replace rho_gas = 0.512 if country == "Germany" & year == 2017
replace rho_gas = 0.514 if country == "Germany" & year == 2018
replace rho_gas = 0.514 if country == "Germany" & year == 2019
replace rho_gas = 0.514 if country == "Germany" & year == 2020
replace rho_gas = 0.516 if country == "Germany" & year == 2021
replace rho_gas = 0.506 if country == "Germany" & year == 2022
replace rho_gas = 0.524 if country == "Germany" & year == 2023
replace rho_gas = 0.529 if country == "Germany" & year == 2024

replace rho_gas = 0.544 if country == "Ireland" & year == 2015
replace rho_gas = 0.544 if country == "Ireland" & year == 2016
replace rho_gas = 0.544 if country == "Ireland" & year == 2017
replace rho_gas = 0.544 if country == "Ireland" & year == 2018
replace rho_gas = 0.544 if country == "Ireland" & year == 2019
replace rho_gas = 0.544 if country == "Ireland" & year == 2020
replace rho_gas = 0.541 if country == "Ireland" & year == 2021
replace rho_gas = 0.531 if country == "Ireland" & year == 2022
replace rho_gas = 0.546 if country == "Ireland" & year == 2023
replace rho_gas = 0.566 if country == "Ireland" & year == 2024

replace rho_gas = 0.582 if country == "Italy" & year == 2015
replace rho_gas = 0.582 if country == "Italy" & year == 2016
replace rho_gas = 0.582 if country == "Italy" & year == 2017
replace rho_gas = 0.582 if country == "Italy" & year == 2018
replace rho_gas = 0.582 if country == "Italy" & year == 2019
replace rho_gas = 0.583 if country == "Italy" & year == 2020
replace rho_gas = 0.583 if country == "Italy" & year == 2021
replace rho_gas = 0.583 if country == "Italy" & year == 2022
replace rho_gas = 0.583 if country == "Italy" & year == 2023
replace rho_gas = 0.583 if country == "Italy" & year == 2024

replace rho_gas = 0.547 if country == "Netherlands" & year == 2015
replace rho_gas = 0.543 if country == "Netherlands" & year == 2016
replace rho_gas = 0.542 if country == "Netherlands" & year == 2017
replace rho_gas = 0.541 if country == "Netherlands" & year == 2018
replace rho_gas = 0.539 if country == "Netherlands" & year == 2019
replace rho_gas = 0.537 if country == "Netherlands" & year == 2020
replace rho_gas = 0.537 if country == "Netherlands" & year == 2021
replace rho_gas = 0.537 if country == "Netherlands" & year == 2022
replace rho_gas = 0.544 if country == "Netherlands" & year == 2023
replace rho_gas = 0.544 if country == "Netherlands" & year == 2024

replace rho_gas = 0.592 if country == "Poland" & year == 2015
replace rho_gas = 0.592 if country == "Poland" & year == 2016
replace rho_gas = 0.585 if country == "Poland" & year == 2017
replace rho_gas = 0.592 if country == "Poland" & year == 2018
replace rho_gas = 0.589 if country == "Poland" & year == 2019
replace rho_gas = 0.587 if country == "Poland" & year == 2020
replace rho_gas = 0.587 if country == "Poland" & year == 2021
replace rho_gas = 0.588 if country == "Poland" & year == 2022
replace rho_gas = 0.588 if country == "Poland" & year == 2023
replace rho_gas = 0.588 if country == "Poland" & year == 2024

replace rho_lignite = 0.360 if country == "Czechia" & year == 2015
replace rho_lignite = 0.360 if country == "Czechia" & year == 2016
replace rho_lignite = 0.368 if country == "Czechia" & year == 2017
replace rho_lignite = 0.370 if country == "Czechia" & year == 2018
replace rho_lignite = 0.370 if country == "Czechia" & year == 2019
replace rho_lignite = 0.384 if country == "Czechia" & year == 2020
replace rho_lignite = 0.390 if country == "Czechia" & year == 2021
replace rho_lignite = 0.390 if country == "Czechia" & year == 2022
replace rho_lignite = 0.390 if country == "Czechia" & year == 2023
replace rho_lignite = 0.390 if country == "Czechia" & year == 2024

replace rho_lignite = 0.390 if country == "Germany" & year == 2015
replace rho_lignite = 0.390 if country == "Germany" & year == 2016
replace rho_lignite = 0.390 if country == "Germany" & year == 2017
replace rho_lignite = 0.390 if country == "Germany" & year == 2018
replace rho_lignite = 0.394 if country == "Germany" & year == 2019
replace rho_lignite = 0.394 if country == "Germany" & year == 2020
replace rho_lignite = 0.394 if country == "Germany" & year == 2021
replace rho_lignite = 0.397 if country == "Germany" & year == 2022
replace rho_lignite = 0.402 if country == "Germany" & year == 2023
replace rho_lignite = 0.408 if country == "Germany" & year == 2024

replace rho_lignite = . if country == "Ireland" & year == 2015
replace rho_lignite = . if country == "Ireland" & year == 2016
replace rho_lignite = . if country == "Ireland" & year == 2017
replace rho_lignite = . if country == "Ireland" & year == 2018
replace rho_lignite = . if country == "Ireland" & year == 2019
replace rho_lignite = . if country == "Ireland" & year == 2020
replace rho_lignite = . if country == "Ireland" & year == 2021
replace rho_lignite = . if country == "Ireland" & year == 2022
replace rho_lignite = . if country == "Ireland" & year == 2023
replace rho_lignite = . if country == "Ireland" & year == 2024

replace rho_lignite = 0.320 if country == "Italy" & year == 2015
replace rho_lignite = 0.320 if country == "Italy" & year == 2016
replace rho_lignite = 0.320 if country == "Italy" & year == 2017
replace rho_lignite = 0.320 if country == "Italy" & year == 2018
replace rho_lignite = 0.320 if country == "Italy" & year == 2019
replace rho_lignite = 0.320 if country == "Italy" & year == 2020
replace rho_lignite = 0.320 if country == "Italy" & year == 2021
replace rho_lignite = 0.320 if country == "Italy" & year == 2022
replace rho_lignite = 0.320 if country == "Italy" & year == 2023
replace rho_lignite = 0.320 if country == "Italy" & year == 2024

replace rho_lignite = . if country == "Netherlands" & year == 2015
replace rho_lignite = . if country == "Netherlands" & year == 2016
replace rho_lignite = . if country == "Netherlands" & year == 2017
replace rho_lignite = . if country == "Netherlands" & year == 2018
replace rho_lignite = . if country == "Netherlands" & year == 2019
replace rho_lignite = . if country == "Netherlands" & year == 2020
replace rho_lignite = . if country == "Netherlands" & year == 2021
replace rho_lignite = . if country == "Netherlands" & year == 2022
replace rho_lignite = . if country == "Netherlands" & year == 2023
replace rho_lignite = . if country == "Netherlands" & year == 2024

replace rho_lignite = 0.366 if country == "Poland" & year == 2015
replace rho_lignite = 0.366 if country == "Poland" & year == 2016
replace rho_lignite = 0.366 if country == "Poland" & year == 2017
replace rho_lignite = 0.370 if country == "Poland" & year == 2018
replace rho_lignite = 0.370 if country == "Poland" & year == 2019
replace rho_lignite = 0.375 if country == "Poland" & year == 2020
replace rho_lignite = 0.375 if country == "Poland" & year == 2021
replace rho_lignite = 0.375 if country == "Poland" & year == 2022
replace rho_lignite = 0.375 if country == "Poland" & year == 2023
replace rho_lignite = 0.375 if country == "Poland" & year == 2024

replace rho_hardcoal = 0.394 if country == "Czechia" & year == 2015
replace rho_hardcoal = 0.394 if country == "Czechia" & year == 2016
replace rho_hardcoal = 0.394 if country == "Czechia" & year == 2017
replace rho_hardcoal = 0.394 if country == "Czechia" & year == 2018
replace rho_hardcoal = 0.394 if country == "Czechia" & year == 2019
replace rho_hardcoal = 0.394 if country == "Czechia" & year == 2020
replace rho_hardcoal = 0.394 if country == "Czechia" & year == 2021
replace rho_hardcoal = 0.394 if country == "Czechia" & year == 2022
replace rho_hardcoal = 0.394 if country == "Czechia" & year == 2023
replace rho_hardcoal = 0.394 if country == "Czechia" & year == 2024

replace rho_hardcoal = 0.401 if country == "Germany" & year == 2015
replace rho_hardcoal = 0.404 if country == "Germany" & year == 2016
replace rho_hardcoal = 0.405 if country == "Germany" & year == 2017
replace rho_hardcoal = 0.412 if country == "Germany" & year == 2018
replace rho_hardcoal = 0.413 if country == "Germany" & year == 2019
replace rho_hardcoal = 0.415 if country == "Germany" & year == 2020
replace rho_hardcoal = 0.415 if country == "Germany" & year == 2021
replace rho_hardcoal = 0.416 if country == "Germany" & year == 2022
replace rho_hardcoal = 0.419 if country == "Germany" & year == 2023
replace rho_hardcoal = 0.419 if country == "Germany" & year == 2024

replace rho_hardcoal = 0.415 if country == "Ireland" & year == 2015
replace rho_hardcoal = 0.415 if country == "Ireland" & year == 2016
replace rho_hardcoal = 0.415 if country == "Ireland" & year == 2017
replace rho_hardcoal = 0.415 if country == "Ireland" & year == 2018
replace rho_hardcoal = 0.415 if country == "Ireland" & year == 2019
replace rho_hardcoal = 0.415 if country == "Ireland" & year == 2020
replace rho_hardcoal = 0.415 if country == "Ireland" & year == 2021
replace rho_hardcoal = 0.415 if country == "Ireland" & year == 2022
replace rho_hardcoal = 0.415 if country == "Ireland" & year == 2023
replace rho_hardcoal = 0.415 if country == "Ireland" & year == 2024

replace rho_hardcoal = 0.429 if country == "Italy" & year == 2015
replace rho_hardcoal = 0.429 if country == "Italy" & year == 2016
replace rho_hardcoal = 0.429 if country == "Italy" & year == 2017
replace rho_hardcoal = 0.431 if country == "Italy" & year == 2018
replace rho_hardcoal = 0.431 if country == "Italy" & year == 2019
replace rho_hardcoal = 0.434 if country == "Italy" & year == 2020
replace rho_hardcoal = 0.434 if country == "Italy" & year == 2021
replace rho_hardcoal = 0.434 if country == "Italy" & year == 2022
replace rho_hardcoal = 0.434 if country == "Italy" & year == 2023
replace rho_hardcoal = 0.434 if country == "Italy" & year == 2024

replace rho_hardcoal = 0.437 if country == "Netherlands" & year == 2015
replace rho_hardcoal = 0.455 if country == "Netherlands" & year == 2016
replace rho_hardcoal = 0.455 if country == "Netherlands" & year == 2017
replace rho_hardcoal = 0.467 if country == "Netherlands" & year == 2018
replace rho_hardcoal = 0.467 if country == "Netherlands" & year == 2019
replace rho_hardcoal = 0.467 if country == "Netherlands" & year == 2020
replace rho_hardcoal = 0.467 if country == "Netherlands" & year == 2021
replace rho_hardcoal = 0.467 if country == "Netherlands" & year == 2022
replace rho_hardcoal = 0.467 if country == "Netherlands" & year == 2023
replace rho_hardcoal = 0.467 if country == "Netherlands" & year == 2024

replace rho_hardcoal = 0.370 if country == "Poland" & year == 2015
replace rho_hardcoal = 0.372 if country == "Poland" & year == 2016
replace rho_hardcoal = 0.378 if country == "Poland" & year == 2017
replace rho_hardcoal = 0.379 if country == "Poland" & year == 2018
replace rho_hardcoal = 0.396 if country == "Poland" & year == 2019
replace rho_hardcoal = 0.400 if country == "Poland" & year == 2020
replace rho_hardcoal = 0.401 if country == "Poland" & year == 2021
replace rho_hardcoal = 0.404 if country == "Poland" & year == 2022
replace rho_hardcoal = 0.410 if country == "Poland" & year == 2023
replace rho_hardcoal = 0.410 if country == "Poland" & year == 2024

*replace rho_hardcoal = rho_hardcoal+0.02


gen em_gas = gen_gas * 0.2008 / rho_gas
gen em_hardcoal = gen_hardcoal * 0.3382 / rho_hardcoal
gen em_lignite = gen_lignite * 0.3987 / rho_lignite
replace em_gas = 0 if em_gas==.
replace em_hardcoal = 0 if em_hardcoal==.
replace em_lignite = 0 if em_lignite==.
gen em_coal = em_lignite + em_hardcoal
gen em = em_gas + em_coal
replace em=. if em==0
label variable em "Coal- and gas-based emissions (tCO2)"


*** Air Pollution
****** Sources:
****** https://www.umweltbundesamt.de/sites/default/files/medien/1410/publikationen/2019-11-29_texte_141-2019_emissionsfaktoren-grossfeuerungsanlagen-en.pdf
****** Lignite: Table 9, Hard coal: Table 16, Natural Gas: Table 45, Table 46

* Formular: Pollutant_in_kg = emission_factor_in_kg/TJ / conversion-Factor_TJ_to_MWh

gen NOx_lignite = gen_lignite * 70.38 / 277.778
gen SO2_lignite = gen_lignite * 240.3 / 277.778
gen PM_lignite = gen_lignite * 0.78 / 277.778
*
gen NOx_hardcoal = gen_hardcoal * 55.63 / 277.778
gen SO2_hardcoal = gen_hardcoal * 36.85 / 277.778
gen PM_hardcoal = gen_hardcoal * 1.15 / 277.778
*
gen NOx_naturalgas = gen_gas   * 27.48 / 277.778
gen SO2_naturalgas   = gen_gas   * 0.2 / 277.778
gen PM_naturalgas   = gen_gas  * 0.09 / 277.778

gen NOx = (NOx_lignite + NOx_hardcoal + NOx_naturalgas)
gen SO2 = (SO2_lignite + SO2_hardcoal + SO2_naturalgas)
gen PM = (PM_lignite + PM_hardcoal + PM_naturalgas)

label variable NOx "Nitrogenoxide NOx (Kg)"
label variable SO2 "Sulfurdioxide SO2 (Kg)"
label variable PM "Particulate matter PM2.5 (Kg)"


* Health impacts
* source: Markandya & Wilkinson (2007, the Lancet): "Electricity generation and health", Table 2
** Deaths per TWh --> convert from TWh to MWh
gen deaths_lignite = gen_lignite*(32.6/1000000) 
gen deaths_hardcoal = gen_hardcoal*(24.5/1000000) 
gen deaths_naturalgas = gen_gas*(2.8/1000000) 

gen illnesses_lignite = gen_lignite*(298/1000000) 
gen illnesses_hardcoal = gen_hardcoal*(225/1000000) 
gen illnesses_naturalgas = gen_gas*(30/1000000) 

gen deaths = (deaths_lignite + deaths_hardcoal + deaths_naturalgas)
gen illnesses = (illnesses_lignite + illnesses_hardcoal + illnesses_naturalgas)

label variable deaths "Premature deaths"
label variable illnesses "Serious illnesses"


** Build logs
foreach x in NOx SO2 PM deaths illnesses {
	gen log_`x' = log(`x')	
	}


** Marginal costs
gen MC_gas = (Pgas + 0.2008*Pco2) / 0.561
gen MC_coal = (Phardcoal + 0.39*Pco2) / 0.39

*generate MC ratio*
gen costratio = MC_gas/MC_coal

label variable Pgas "Dutch TTF gas future"
label variable Phardcoal "API2 coal future"
label variable Pco2 "EUA carbon emissions future"
label variable MC_gas "Marginal costs gas"
label variable MC_coal "Marginal costs coal"

gen Phypco2=(0.39*Pgas-0.561*Phardcoal)/(0.39*0.561-0.39*0.2008)


/*
preserve
		keep if country=="Germany" | country=="Poland" | country=="Italy" | country=="Czechia" | country=="Netherlands" | country=="Ireland" 
		collapse (mean) em_mean=em (sum) em_total=em, by(date)
		gen crisis = 0	
		replace crisis = 850000 if date>=date("01jul2021", "DMY") & date<=date("31dec2022", "DMY")
		twoway area crisis date, color(gs14%50) || ///
		tsline em_total, lcolor(red) lwidth(thin) || ///
		, graphregion(color(white)) bgcolor(white) xlabel(`=d(1jan2015)' `=d(1jan2016)' `=d(1jan2017)' `=d(1jan2018)' `=d(1jan2019)' `=d(1jan2020)' `=d(1jan2021)' `=d(1jan2022)' `=d(1jan2023)' `=d(1jan2024)') scale(0.7) xtitle()
restore
*/
		
gen baseload = gen_runofriverandpoundage + gen_waterreservoir + gen_nuclear + gen_geothermal  // Baseload generation
gen vre = gen_solar + gen_windoffshore + gen_windonshore // variable renewable energy generation
gen coalcheaperthangas = 0
replace coalcheaperthangas = 1 if MC_gas>MC_coal & MC_coal!=. & MC_gas!=.


gen gen_coal = gen_lignite + gen_hardcoal
replace gen_coal=. if em==. // This is for a couple of entries where generation from coal and gas is zero(Missing)
gen log_gen_coal = log(gen_coal)

gen crisis = 0	
replace crisis = 1 if date>=date("01jul2021", "DMY") & date<=date("31dec2022", "DMY")
	sum coalcheaperthangas if coalcheaperthangas==1 & crisis==1
drop crisis

label var Phardcoal_Newcastle    "Australian coal price"
label var Pgas_LNGjap            "Asian gas price"
label var coalcheaperthangas     "1(MC_gas > MC_coal)"
label var baseload               "Baseload infeed"
label var load                   "Load"
label var vre                    "VRE infeed"

drop ID
egen ID = group(country)
xtset ID date
order country ID date

tab dow, gen(i_dow)
tab month, gen(i_month)
tab year, gen(i_year)






******* Empirical Analysis: 


** Two-stage residual inclusion approach (2SRI):
*** First stage 1 (hard coal price regression)
eststo fir1: reg Phardcoal Phardcoal_Newcastle Pgas_LNGjap baseload load vre i.ID#i.year i.dow i.month, robust
predict double v_coal, resid  // save residuals
label var v_coal "Coal price residual"
*** First stage 2 (gas price regression)
test Phardcoal_Newcastle Pgas_LNGjap
eststo fir2: reg Pgas Phardcoal_Newcastle Pgas_LNGjap baseload load vre i.ID#i.year i.dow i.month, robust
predict double v_gas, resid   // save residuals
label var v_gas "Gas price residual"

test Phardcoal_Newcastle Pgas_LNGjap

** Second stage 
eststo sec: ivreg2 gen_coal coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust bw(2)
	** This is the alternative bootstrap procedure:
	*bootstrap, reps(50) nodrop force: xtivreg2 gen_coal coalcheaperthangas v_gas v_coal baseload load vre i_dow* i_month* i_year*, fe robust level(95) 
	
	** Obtain fist-stage F-statistic:
	* ivreg2 gen_coal (Phardcoal Pgas = Phardcoal_Newcastle Pgas_LNGjap) baseload load vre i.ID#i.year i.dow i.month, robust bw(2)


** Produce regression output:
esttab fir1 fir2 sec using "table_2sri.tex", replace ///
    label se booktabs alignment(c) ///
    mtitles("1st Stage: Coal Price" "1st Stage: Gas Price" ///
            "2SRI: Coal Gen." "OLS: Coal Gen.") ///
    keep(Phardcoal_Newcastle Pgas_LNGjap coalcheaperthangas v_coal v_gas baseload load vre) ///
    order(Phardcoal_Newcastle Pgas_LNGjap coalcheaperthangas v_coal v_gas baseload load vre) ///
    stats(F_instr CYFE MonthFE DOWFE N r2, ///
          labels("Instr. F" "Country×Year FE" "Month FE" "Day-of-week FE" "Observations" "R-squared") ///
          fmt(2 0 0 0 0 3)) ///
    star(* 0.10 ** 0.05 *** 0.01) nonotes		
	
	
	
** Stationarity tests:
	xtset ID date
	* 1. Residualize
	foreach v in gen_coal em baseload load vre {
		reghdfe `v', absorb(i.ID#i.year i.month i.dow) resid
		predict double r_`v', resid
	}
	foreach v in Phardcoal Pgas {
		reghdfe `v', absorb(i.year i.month i.dow) resid
		predict double r_`v', resid

	}
	* 2. Run tests
	xtunitroot ips r_gen_coal, lags(7) demean
	xtunitroot ips r_em, lags(7) demean
	xtunitroot ips r_baseload, lags(7) demean
	xtunitroot ips r_load, lags(7) demean
	xtunitroot ips r_vre, lags(7) demean
	dfuller r_Phardcoal if country=="Germany", lags(7)
	dfuller r_Pgas if country=="Germany", lags(7)

	
** Fig 3a: coal electricity	
foreach x in Czechia Germany Italy Poland Netherlands Ireland {
	di "`x'"1
	eststo `x': ivreg2 gen_coal coalcheaperthangas v_gas v_coal baseload load vre i.dow i.month i.year if country=="`x'", robust level(95) bw(2)
}
eststo All: ivreg2 gen_coal coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
grstyle init
*grstyle set mesh
grstyle set plain, horizontal grid
coefplot All, bylabel((1) ALL) || ///
	Germany, bylabel((2) DE) || ///
	Poland, bylabel((3) PL) || ///
	Italy, bylabel((4) IT) || ///
	Czechia, bylabel((5) CZ) || ///
	Netherlands, bylabel((6) NL) || ///
	Ireland, bylabel((7) IE) || ///
	, keep(coalcheaperthangas) levels(95) msize(1) msymbol(dh) mcolor(black) ciopts(recast(rcap) color(black)) xline(0, lcolor(gray) lpattern(dash)) mlabel mlabformat(%13.0fc) mlabposition(12) mlabcolor(black) mlabsize(vsmall)  graphregion(color(white) lwidth(vvthin)) bycoefs name(gr_1, replace)
	graph export EstimatesCoal.png, replace
estimates clear


** Fig 3b: log coal electricity	
foreach x in Czechia Germany Italy Poland Netherlands Ireland {
	di "`x'"
	eststo `x': ivreg2 log_gen_coal coalcheaperthangas v_gas v_coal baseload load vre i.dow i.month i.year if country=="`x'", robust level(95) bw(2)
}
eststo All: ivreg2 log_gen_coal coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
grstyle init
*grstyle set mesh
grstyle set plain, horizontal grid
coefplot All, bylabel((1) ALL) || ///
	Germany, bylabel((2) DE) || ///
	Poland, bylabel((3) PL) || ///
	Italy, bylabel((4) IT) || ///
	Czechia, bylabel((5) CZ) || ///
	Netherlands, bylabel((6) NL) || ///
	Ireland, bylabel((7) IE) || ///
	, keep(coalcheaperthangas) levels(95) msize(1) msymbol(dh) mcolor(black) ciopts(recast(rcap) color(black)) xline(0, lcolor(gray) lpattern(dash)) mlabel mlabformat(%9.2f) mlabposition(12) mlabcolor(black) mlabsize(vsmall)  graphregion(color(white) lwidth(vvthin)) bycoefs name(gr_1, replace)  rescale(100) //xscale(range(0 30)) xlabel(0(5)30)
	graph export LogEstimatesCoal.png, replace	
estimates clear
	
	
** Fig 4a: CO2 emissions		
foreach x in Czechia Germany Italy Poland Netherlands Ireland {
	display "Country ==  `x' "
	eststo `x': ivreg2 em coalcheaperthangas v_gas v_coal baseload load vre i.dow i.month i.year if country=="`x'", robust level(95) bw(2)
}
eststo All: ivreg2 em coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
grstyle init
*grstyle set mesh
grstyle set plain, horizontal grid
coefplot All, bylabel((1) ALL) || ///
	Germany, bylabel((2) DE) || ///
	Poland, bylabel((3) PL) || ///
	Italy, bylabel((4) IT) || ///
	Czechia, bylabel((5) CZ) || ///
	Netherlands, bylabel((6) NL) || ///
	Ireland, bylabel((7) IE) || ///
	, keep(coalcheaperthangas) levels(95) msize(1) msymbol(dh) mcolor(black) ciopts(recast(rcap) color(black)) xline(0, lcolor(gray) lpattern(dash)) mlabel mlabformat(%13.0fc) mlabposition(12) mlabcolor(black) mlabsize(vsmall)  graphregion(color(white) lwidth(vvthin)) bycoefs name(gr_1, replace)
	graph export Estimates.png, replace
estimates clear


** Fig 4b: log CO2 emissions			
gen log_em = log(em)
foreach x in Czechia Germany Italy Poland Netherlands Ireland {
	display "Country ==  `x' "
	eststo `x': ivreg2 log_em coalcheaperthangas v_gas v_coal baseload load vre i.dow i.month i.year if country=="`x'", robust level(95) bw(2)
}
eststo All: ivreg2 log_em coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
grstyle init
*grstyle set mesh
grstyle set plain, horizontal grid
coefplot All, bylabel((1) ALL) || ///
	Germany, bylabel((2) DE) || ///
	Poland, bylabel((3) PL) || ///
	Italy, bylabel((4) IT) || ///
	Czechia, bylabel((5) CZ) || ///
	Netherlands, bylabel((6) NL) || ///
	Ireland, bylabel((7) IE) || ///
	, keep(coalcheaperthangas) levels(95) msize(1) msymbol(dh) mcolor(black) ciopts(recast(rcap) color(black)) xline(0, lcolor(gray) lpattern(dash)) mlabel mlabformat(%9.2f) mlabposition(12) mlabcolor(black) mlabsize(vsmall)  graphregion(color(white) lwidth(vvthin)) bycoefs name(gr_1, replace)  rescale(100)
	graph export LogEstimates.png, replace
estimates clear


** Fig 5a: air pollution	
eststo PM: ivreg2 PM coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
eststo NOx: ivreg2 NOx coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
eststo SO2: ivreg2 SO2 coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)

grstyle init
*grstyle set mesh
grstyle set plain, horizontal grid
coefplot PM, bylabel((1) PM2.5) || ///
		 NOx, bylabel((2) NOx) || ///
		 SO2, bylabel((3) SO2) || ///
	, keep(coalcheaperthangas) levels(95) msize(1) msymbol(dh) mcolor(black) ciopts(recast(rcap) color(black)) xline(0, lcolor(gray) lpattern(dash)) mlabel mlabformat(%9.2fc) mlabposition(12) mlabcolor(black) mlabsize(vsmall)  graphregion(color(white) lwidth(vvthin)) bycoefs name(gr_1, replace)
	graph export health.png, replace
estimates clear

** Fig 5b: log air pollution	
eststo PM: ivreg2 log_PM coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
eststo NOx: ivreg2 log_NOx coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
eststo SO2: ivreg2 log_SO2 coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
grstyle init
*grstyle set mesh
grstyle set plain, horizontal grid
coefplot PM, bylabel((1) PM2.5) || ///
		 NOx, bylabel((2) NOx) || ///
		 SO2, bylabel((3) SO2) || ///
	, keep(coalcheaperthangas) levels(95) msize(1) msymbol(dh) mcolor(black) ciopts(recast(rcap) color(black)) xline(0, lcolor(gray) lpattern(dash)) mlabel mlabformat(%9.2f) mlabposition(12) mlabcolor(black) mlabsize(vsmall)  graphregion(color(white) lwidth(vvthin)) bycoefs name(gr_1, replace)  rescale(100) xscale(range(0 30)) xlabel(0(5)30)
	graph export log_health.png, replace
estimates clear


** Fig 6a: health	
eststo deaths: ivreg2 deaths coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
eststo illnesses: ivreg2 illnesses coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
grstyle init
*grstyle set mesh
grstyle set plain, horizontal grid
coefplot deaths, bylabel((1) Deaths) || ///
		 illnesses, bylabel((2) Illnesses) || ///
	, keep(coalcheaperthangas) levels(95) msize(1) msymbol(dh) mcolor(black) ciopts(recast(rcap) color(black)) xline(0, lcolor(gray) lpattern(dash)) mlabel mlabformat(%9.2fc) mlabposition(12) mlabcolor(black) mlabsize(vsmall)  graphregion(color(white) lwidth(vvthin)) bycoefs name(gr_1, replace)
	graph export deathsillnesses.png, replace
estimates clear

** Fig 6b: log health	
eststo deaths: ivreg2 log_deaths coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
eststo illnesses: ivreg2 log_illnesses coalcheaperthangas v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust level(95) bw(2)
coefplot deaths, bylabel((1) Deaths) || ///
		 illnesses, bylabel((2) Illnesses) || ///
	, keep(coalcheaperthangas) levels(95) msize(1) msymbol(dh) mcolor(black) ciopts(recast(rcap) color(black)) xline(0, lcolor(gray) lpattern(dash)) mlabel mlabformat(%9.3fc) mlabposition(12) mlabcolor(black) mlabsize(vsmall)  graphregion(color(white) lwidth(vvthin)) bycoefs name(gr_1, replace) xlabel(0(0.05)0.3)
	graph export log_deathsillnesses.png, replace
estimates clear



***** ROBUSTNESS *****
	* OLS estimation
	eststo ols: ivreg2 gen_coal coalcheaperthangas baseload load vre i.ID#i.year i.dow i.month, robust bw(2)

	
	* Equal-size quantile bins (5 here, change n() as needed)
	gen spread = MC_gas - MC_coal
	xtile bin10 = spread, n(10)

	eststo x1: ivreg2 gen_coal (c.spread c.spread#c.spread = c.Phardcoal_Newcastle c.Pgas_LNGjap c.Phardcoal_Newcastle#c.Phardcoal_Newcastle c.Pgas_LNGjap#c.Pgas_LNGjap) ///
		baseload load vre i.ID#i.year i.dow i.month, robust bw(2) first	

	* Use factor notation (omit 1st bin as base)
	eststo x2: ivreg2 gen_coal i.bin10 v_gas v_coal baseload load vre ///
		i.ID#i.year i.dow i.month, robust bw(2)
	margins bin10   // predicted gen_coal at each bin, others at their means
	marginsplot, recast(bar) ciopts(lwidth(thin)) ///
		title("") ///
		ytitle("Predicted coal generation (MWh per country-day)") ///
		xtitle("Coal-gas spread quintile") ///
		xline(3.5, lpattern(dash) lcolor(gs8) lwidth(medthick)) ///
		text(189000 2  "(MC{subscript:coal} > MC{subscript:gas})", size(small)) ///
		text(189000 5  "(MC{subscript:coal} < MC{subscript:gas})", size(small)) ///
		name(fig_bins, replace)	
		graph export bins.png, replace
		
	esttab ols x1 x2 using "robustness.tex", replace ///
		booktabs label se alignment(c) ///
		mtitles("2SLS" "2SRI") ///
		order(c.spread c.spread#c.spread v_gas v_coal baseload load vre) ///
		star(* 0.10 ** 0.05 *** 0.01) nonotes

** Lags and Moving Averages
	gen Help = .
	replace Help = coalcheaperthangas
	eststo c0: ivreg2 gen_coal Help v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust bw(2)
	replace Help = l.coalcheaperthangas
	eststo c1: ivreg2 gen_coal Help v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust bw(2)
	replace Help = l2.coalcheaperthangas
	eststo c2: ivreg2 gen_coal Help v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust bw(2)
	replace Help = l3.coalcheaperthangas
	eststo c3: ivreg2 gen_coal Help v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust bw(2)
	gen coalcheaper_movavg = (coalcheaperthangas + l.coalcheaperthangas + l2.coalcheaperthangas)/3
	replace Help = coalcheaper_movavg
	eststo c4: ivreg2 gen_coal Help v_gas v_coal baseload load vre i.ID#i.year i.dow i.month, robust bw(2)

	coefplot ///
	c0, bylabel(Contemporary) || ///
	c1, bylabel(Lag 1) || ///
	c2, bylabel(Lag 2) || ///
	c3, bylabel(Lag 3) || ///
	c4, bylabel(3-days MA) || ///
	, keep(Help) levels(95) msize(1) msymbol(dh) mcolor(black) ciopts(recast(rcap) color(black)) xline(0, lcolor(gray) lpattern(dash)) mlabel mlabformat(%9.0f) mlabposition(12) mlabcolor(black) mlabsize(vsmall) graphregion(color(white) lwidth(vvthin)) bycoefs name(gr_1, replace)	xscale(range(0 22000)) xlabel(0(5000)25000)
	graph export lags.png, replace

		
***** DESCRIPTIVE FIGURES


** Figure 1a
gen crisis = 0	
replace crisis = 400 if date>=date("01jul2021", "DMY") & date<=date("31dec2022", "DMY")
twoway area crisis date if country=="Germany", color(gs14%50) || tsline Pgas if country=="Germany", lcolor(blue) lwidth(thin) || tsline Phardcoal if country=="Germany", lcolor(red) lwidth(thin) lpattern(dash) || tsline Pco2 if country=="Germany", lcolor(green) lwidth(thin) lpattern(longdash) yaxis(2) graphregion(color(white)) bgcolor(white) ytitle("Prices of natural gas and hard coal (€/MWh)") ytitle("Price EU emission allowances (€/tCO2)", axis(2)) xtitle("") scale(0.7) title("") recast(line) ymlabel(##5, angle(0)) ylabel(0(10)120, axis(2) angle(0)) xlabel(`=d(1jan2015)' `=d(1jan2016)' `=d(1jan2017)' `=d(1jan2018)' `=d(1jan2019)' `=d(1jan2020)' `=d(1jan2021)' `=d(1jan2022)' `=d(1jan2023)' `=d(1jan2024)') legend(row(3) order(2 "Dutch TTF gas future" 3 "API2 coal future" 4 "EUA carbon emissions future") position(11) ring(0)) ylabel(, angle(0)) ttext(380 `=d(10apr2022)' "Crisis period", place(n))
graph export CommodityPrices.png, replace
drop crisis


** Figure 1b
sort date
grstyle init
grstyle set mesh
gen crisis = 0
replace crisis = 650 if date>=date("01jul2021", "DMY") & date<=date("31dec2022", "DMY")
twoway area crisis date if country=="Germany", color(gs14%50) || line MC_gas date if country=="Germany", lcolor(blue) lwidth(thin) || line MC_coal date if country=="Germany", lcolor(red) lwidth(thin) lpattern(dash) graphregion(color(white)) bgcolor(white) ytitle("Marginal costs (€/MWh)") xtitle("") scale(0.7) title("") recast(line) xmtick(##10) title("") recast(line) ymlabel(##5, angle(0)) xlabel(`=d(1jan2015)' `=d(1jan2016)' `=d(1jan2017)' `=d(1jan2018)' `=d(1jan2019)' `=d(1jan2020)' `=d(1jan2021)' `=d(1jan2022)' `=d(1jan2023)') legend(row(3) order(2 "Marginal costs gas" 3 "Marginal costs coal") position(11) ring(0) ) ylabel(, angle(0)) ttext(630 `=d(01mar2022)' "Crisis period:", place(n)) ttext(605 `=d(01mar2022)' "510 days for which", place(n)) ttext(580 `=d(01mar2022)' "MC{subscript:coal} < MC{subscript:gas}", place(n))
	graph export MarginalCosts.png, replace
drop crisis



sum Pco2 if date>=date("01jul2021", "DMY") & date<=date("31dec2022", "DMY")
sum Phypco2 if date>=date("01jul2021", "DMY") & date<=date("31dec2022", "DMY")
grstyle init
grstyle set mesh
sort date
gen crisis = 0	
replace crisis = 820 if date>=date("01jul2021", "DMY") & date<=date("31dec2022", "DMY")
twoway area crisis date, color(gs14%50) || line Pco2 date if country=="Germany", lcolor(green) lpattern(longdash) || line Phypco2 date if country=="Germany", lcolor(red) lwidth(thin) lpattern(solid) graphregion(color(white)) bgcolor(white) ytitle("Carbon price (€/tCO2)") xtitle("") scale(0.7) title("") recast(line) xmtick(##10) title("") recast(line) ymlabel(##5, angle(0)) xlabel(`=d(1jan2015)' `=d(1jan2016)' `=d(1jan2017)' `=d(1jan2018)' `=d(1jan2019)' `=d(1jan2020)' `=d(1jan2021)' `=d(1jan2022)' `=d(1jan2023)' `=d(1jan2024)') legend(row(3) order(2 "Actual carbon price (EUA future)" 3 "Hypothetical carbon price to ensure MC{sub:gas}=MC{sub:coal}") position(11) ring(0) ) ylabel(, angle(0)) ttext(800 `=d(01mar2022)' "Crisis period", place(n)) ttext(190 `=d(01jul2021)' "Ø hypothetical carbon price during crisis = 197.76", place(w)) ttext(150 `=d(01jul2021)' "Ø observed carbon price during crisis = 75.16", place(w))
graph export HypCarbPrice.png, replace
drop crisis


	
egen gen_all_coal = total(gen_coal), by(date)
egen gen_all_gas = total(gen_gas), by(date)
egen load_all = total(load), by(date)
egen em_all = total(em), by(date)
replace gen_all_coal = gen_all_coal/1000000 // convert from MWh to TWh
replace gen_all_gas = gen_all_gas/1000000 // convert from MWh to TWh
replace load_all = load_all/1000000 // convert from MWh to TWh
replace em_all = em_all / 1000000 // convert to million tons of CO2
gen yearmonth = ym(year, month)
format yearmonth %tm
collapse (sum) gen_all_coal gen_all_gas load_all em_all, by(yearmonth)
tsset yearmonth, monthly
gen crisis = 0	
replace crisis = 700 if yearmonth>=ym(2021, 6) & yearmonth<=ym(2023,1)

** Figure 2b
twoway bar crisis yearmonth, lwidth(none) bcolor(gs14%50) || tsline gen_all_coal, lcolor(brown) lwidth(thin) || tsline gen_all_gas, lcolor(blue) lwidth(thin) || tsline load_all, lcolor(gray) lwidth(thin) graphregion(color(white)) bgcolor(white) scale(0.7) xtitle("") xlabel(#11) ytitle("Coal electricity, gas electricity, load (TWh)") ylabel(0(50)700) ttext(670 `=ym(2022, 4)' "Crisis period", place(n)) text(100 `=ym(2015, 2)' "Gas electr."  270 `=ym(2015, 2)' "Coal electr."  630 `=ym(2015, 2)' "Load", placement(east)) legend(off) //legend(order(2 "Coal-fired electricity" 3 "Gas-fired electricity" 4 "Load") row(1))
	graph export coalgasload.png, replace
drop crisis

** Figure 2a
gen crisis = 100	
replace crisis = 300 if yearmonth>=ym(2021, 6) & yearmonth<=ym(2023,1)
twoway bar crisis yearmonth, lwidth(none) bcolor(gs14%50) || tsline em_all, lcolor(black) lwidth(thin) || lfit em_all yearmonth if yearmonth>=ym(2015, 6) & yearmonth<ym(2021, 5), lpattern(dash) lcolor(gray) || lfit em_all yearmonth if yearmonth>=ym(2021, 5) & yearmonth<ym(2023, 2), lpattern(dash) lcolor(gray) graphregion(color(white)) bgcolor(white) ytitle("Million metric tons of CO2") scale(0.7) xtitle("") xlabel(#11) legend(off) ttext(290 `=ym(2022, 4)' "Crisis period", place(n)) ylabel(100(20)300)
	graph export emissions.png, replace
drop crisis	